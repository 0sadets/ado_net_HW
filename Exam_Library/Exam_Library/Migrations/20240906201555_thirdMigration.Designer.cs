// <auto-generated />
using System;
using Exam_Library;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Exam_Library.Migrations
{
    [DbContext(typeof(LibraryDbContext))]
    [Migration("20240906201555_thirdMigration")]
    partial class thirdMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ActionBook", b =>
                {
                    b.Property<int>("ActionsId")
                        .HasColumnType("int");

                    b.Property<int>("BooksId")
                        .HasColumnType("int");

                    b.HasKey("ActionsId", "BooksId");

                    b.HasIndex("BooksId");

                    b.ToTable("ActionBook");
                });

            modelBuilder.Entity("BookClient", b =>
                {
                    b.Property<int>("BooksId")
                        .HasColumnType("int");

                    b.Property<int>("ClientsId")
                        .HasColumnType("int");

                    b.HasKey("BooksId", "ClientsId");

                    b.HasIndex("ClientsId");

                    b.ToTable("BookClient");
                });

            modelBuilder.Entity("Exam_Library.Entities.Action", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataStart")
                        .HasColumnType("datetime2");

                    b.Property<float>("DiscountPercentage")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("Actions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DataEnd = new DateTime(2024, 11, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataStart = new DateTime(2024, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DiscountPercentage = 25f,
                            Name = "Autumn Action"
                        },
                        new
                        {
                            Id = 2,
                            DataEnd = new DateTime(2024, 10, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataStart = new DateTime(2024, 11, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DiscountPercentage = 45f,
                            Name = "After Summer Action"
                        });
                });

            modelBuilder.Entity("Exam_Library.Entities.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Country = "USA",
                            Lastname = "Sakavic",
                            Name = "Nora"
                        },
                        new
                        {
                            Id = 2,
                            Country = "Ukraine",
                            Lastname = "Pavlyuk",
                            Name = "Hilarion"
                        },
                        new
                        {
                            Id = 3,
                            Country = "USA",
                            Lastname = "Morgenstern",
                            Name = "Erin"
                        },
                        new
                        {
                            Id = 4,
                            Country = "Ukraine",
                            Lastname = "Tsybulska",
                            Name = "V."
                        },
                        new
                        {
                            Id = 5,
                            Country = "Germany",
                            Lastname = "Mann",
                            Name = "Thomas"
                        },
                        new
                        {
                            Id = 6,
                            Country = "USA",
                            Lastname = "Bradbury",
                            Name = "Ray"
                        },
                        new
                        {
                            Id = 7,
                            Country = "USA",
                            Lastname = "Lee",
                            Name = "Harper"
                        },
                        new
                        {
                            Id = 8,
                            Country = "UK",
                            Lastname = "Brontë",
                            Name = "Charlotte"
                        },
                        new
                        {
                            Id = 9,
                            Country = "Ukraine",
                            Lastname = "Kvitky-Osnovyanenko",
                            Name = "Grigory"
                        });
                });

            modelBuilder.Entity("Exam_Library.Entities.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("HasDiscount")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSequel")
                        .HasColumnType("bit");

                    b.Property<int>("LibraryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("NumberOfPages")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Publisher")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("LibraryId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            Cost = 520m,
                            Count = 10,
                            Description = "Neil Josten is the newest addition to the Palmetto State University Exy team. He's short, he's fast, he's got a ton of potential — and he's the runaway son of the murderous crime lord known as The Butcher. Signing a contract with the PSU Foxes is the last thing a guy like Neil should do.",
                            Genre = "Young Adult",
                            HasDiscount = false,
                            IsSequel = false,
                            LibraryId = 1,
                            Name = "The Foxhole Court",
                            NumberOfPages = 260,
                            Price = 570m,
                            Publisher = "Nora Sakavic",
                            Status = "Available",
                            Year = 2013
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 1,
                            Cost = 590m,
                            Count = 10,
                            Description = "The Foxes are a fractured mess, but their latest disaster might be the miracle they've always needed to come together as a team. The one person standing in their way is Andrew, and the only one who can break through his personal barriers is Neil.",
                            Genre = "Contemporary literature",
                            HasDiscount = false,
                            IsSequel = true,
                            LibraryId = 1,
                            Name = "The Raven King",
                            NumberOfPages = 432,
                            Price = 670m,
                            Publisher = "Nora Sakavic",
                            Status = "Available",
                            Year = 2013
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = 1,
                            Cost = 640m,
                            Count = 1,
                            Description = "Neil Josten is out of time. He knew when he came to PSU he wouldn't survive the year, but with his death right around the corner he's got more reasons than ever to live. Befriending the Foxes was inadvisable. Kissing one is unthinkable. Neil should know better than to get involved with anyone this close to the end, but Andrew's never been the easiest person to walk away from. ",
                            Genre = "Contemporary literature",
                            HasDiscount = false,
                            IsSequel = true,
                            LibraryId = 1,
                            Name = "The King's Men",
                            NumberOfPages = 448,
                            Price = 750m,
                            Publisher = "Nora Sakavic",
                            Status = "Reserved",
                            Year = 2014
                        },
                        new
                        {
                            Id = 4,
                            AuthorId = 1,
                            Cost = 630m,
                            Count = 0,
                            Description = "It is a truth Jean has built his life around, a reminder this is the best he can hope for and all he deserves. But when he is stolen from Edgar Allan University and sold to a more dangerous master, Jean is forced to contend with a life outside of the Nest for the first time in five years. ",
                            Genre = "Contemporary literature",
                            HasDiscount = false,
                            IsSequel = false,
                            LibraryId = 1,
                            Name = "The Sunshine Court",
                            NumberOfPages = 330,
                            Price = 630m,
                            Publisher = "Nora Sakavic",
                            Status = "Sold",
                            Year = 2024
                        },
                        new
                        {
                            Id = 5,
                            AuthorId = 2,
                            Cost = 550m,
                            Count = 15,
                            Description = "\"I see you are interested in the dark\" is a story about impenetrable human indifference and the darkness within us. About being honest with ourselves and the price we are willing to pay for forgetting. About sins that materialize and atonement, more expensive than peace.",
                            Genre = "Fiction",
                            HasDiscount = false,
                            IsSequel = false,
                            LibraryId = 1,
                            Name = "I see you are interested in the dark",
                            NumberOfPages = 664,
                            Price = 550m,
                            Publisher = "Old Lion Publishing House",
                            Status = "Available",
                            Year = 2022
                        },
                        new
                        {
                            Id = 6,
                            AuthorId = 3,
                            Cost = 230m,
                            Count = 8,
                            Description = "Zachary Ezra Rawlins is an ordinary student living on a university campus in Vermont. But somehow he gets his hands on a mysterious book from a dusty library shelf. Holding his breath, Zachary turns page after page, fascinated by the fate of unlucky lovers, when he comes across something completely unexpected - a story from his own childhood.",
                            Genre = "Adventure novel",
                            HasDiscount = false,
                            IsSequel = false,
                            LibraryId = 1,
                            Name = "Starless sea",
                            NumberOfPages = 554,
                            Price = 230m,
                            Publisher = "Vivat",
                            Status = "Available",
                            Year = 2023
                        },
                        new
                        {
                            Id = 7,
                            AuthorId = 4,
                            Cost = 250m,
                            Count = 9,
                            Description = "Elena's life has finally become truly happy: the smell of delicious coffee in a cozy house, a beloved husband and a cute dog nearby, soon - a dream wedding...",
                            Genre = "Mystical Horror",
                            HasDiscount = false,
                            IsSequel = false,
                            LibraryId = 2,
                            Name = "Konotop Witch",
                            NumberOfPages = 272,
                            Price = 250m,
                            Publisher = "KSD",
                            Status = "Available",
                            Year = 2024
                        },
                        new
                        {
                            Id = 8,
                            AuthorId = 5,
                            Cost = 440m,
                            Count = 10,
                            Description = "The narrator describes his family's trip to the fictional seaside town of Torre di Venere, where he encounters a magician and hypnotist named Cipolla. But the charismatic plasterer uses his own abilities to control the audience in a very brutal and fascist way.",
                            Genre = "novel",
                            HasDiscount = true,
                            IsSequel = false,
                            LibraryId = 2,
                            Name = "\"Death in Venice\" and other short stories",
                            NumberOfPages = 312,
                            Price = 440m,
                            Publisher = "Laboratory",
                            Status = "Available",
                            Year = 1912
                        },
                        new
                        {
                            Id = 9,
                            AuthorId = 6,
                            Cost = 200m,
                            Count = 12,
                            Description = "Fahrenheit 451 tells the story of Guy Montag and his transformation from a book-burning fireman to a book-reading rebel. ",
                            Genre = "fantasy, horror",
                            HasDiscount = false,
                            IsSequel = false,
                            LibraryId = 2,
                            Name = "451° Fahrenheit",
                            NumberOfPages = 272,
                            Price = 220m,
                            Publisher = "Educational book - Bohdan",
                            Status = "Available",
                            Year = 1953
                        },
                        new
                        {
                            Id = 10,
                            AuthorId = 7,
                            Cost = 400m,
                            Count = 20,
                            Description = "Set in small-town Alabama, the novel is a bildungsroman, or coming-of-age story, and chronicles the childhood of Scout and Jem Finch as their father Atticus defends a Black man falsely accused of rape. ",
                            Genre = "Southern Gothic Bildungsroman",
                            HasDiscount = true,
                            IsSequel = false,
                            LibraryId = 2,
                            Name = "To kill a mockingbird",
                            NumberOfPages = 384,
                            Price = 400m,
                            Publisher = "KM-BUKS",
                            Status = "Available",
                            Year = 1960
                        },
                        new
                        {
                            Id = 11,
                            AuthorId = 8,
                            Cost = 460m,
                            Count = 19,
                            Description = "Jane describes herself as, \"poor, obscure, plain and little.\" Mr. Rochester once compliments Jane's \"hazel eyes and hazel hair\", but she informs the reader that Mr. Rochester was mistaken, as her eyes are not hazel; they are in fact green.",
                            Genre = "Gothic Bildungsroman Romance",
                            HasDiscount = true,
                            IsSequel = false,
                            LibraryId = 2,
                            Name = "Jane Eyre",
                            NumberOfPages = 728,
                            Price = 460m,
                            Publisher = "Nebo Booklab Publishing",
                            Status = "Available",
                            Year = 1847
                        },
                        new
                        {
                            Id = 12,
                            AuthorId = 9,
                            Cost = 390m,
                            Count = 17,
                            Description = "The story tells about the events in the small town of Konotopi, where local officials, in particular the centurion Nikita Zabryokha and the clerk Pistryak, dive into the search for a witch. Because of superstitions, ignorance and intrigues, they get into funny situations. The main events revolve around false accusations of witchcraft and the consequences for the local people.",
                            Genre = "Satirical story",
                            HasDiscount = true,
                            IsSequel = false,
                            LibraryId = 2,
                            Name = "Konotop Witch",
                            NumberOfPages = 524,
                            Price = 390m,
                            Publisher = "Vivat",
                            Status = "Available",
                            Year = 1833
                        });
                });

            modelBuilder.Entity("Exam_Library.Entities.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("LibraryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("LibraryId");

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LibraryId = 1,
                            Name = "Turner",
                            Surname = "Winifrede"
                        },
                        new
                        {
                            Id = 2,
                            LibraryId = 1,
                            Name = "Lopez",
                            Surname = "Quintina"
                        },
                        new
                        {
                            Id = 3,
                            LibraryId = 1,
                            Name = "White",
                            Surname = "Uda"
                        },
                        new
                        {
                            Id = 4,
                            LibraryId = 1,
                            Name = "Sanchez",
                            Surname = "Jonah"
                        },
                        new
                        {
                            Id = 5,
                            LibraryId = 1,
                            Name = "Thomas",
                            Surname = "Zachery"
                        },
                        new
                        {
                            Id = 6,
                            LibraryId = 2,
                            Name = "Foster",
                            Surname = "Quartney"
                        },
                        new
                        {
                            Id = 7,
                            LibraryId = 2,
                            Name = "Perez",
                            Surname = "Felipe"
                        },
                        new
                        {
                            Id = 8,
                            LibraryId = 2,
                            Name = "Jackson",
                            Surname = "Isaias"
                        },
                        new
                        {
                            Id = 9,
                            LibraryId = 2,
                            Name = "Garcia",
                            Surname = "Faris"
                        });
                });

            modelBuilder.Entity("Exam_Library.Entities.Library", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Libraries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Kyivska street, 44, Rivne, Rivne region",
                            Name = "Central city library named after V. Korolenko"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Kyivska street, 18, Rivne, Rivne region",
                            Name = "Rivne regional library for young people"
                        });
                });

            modelBuilder.Entity("Exam_Library.Entities.Reserved", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfReservetion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("ClientId");

                    b.ToTable("Reserveds");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookId = 4,
                            ClientId = 5,
                            DateOfReservetion = new DateTime(2024, 8, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Completed"
                        },
                        new
                        {
                            Id = 2,
                            BookId = 3,
                            ClientId = 2,
                            DateOfReservetion = new DateTime(2024, 9, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Active"
                        },
                        new
                        {
                            Id = 3,
                            BookId = 7,
                            ClientId = 4,
                            DateOfReservetion = new DateTime(2024, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Completed"
                        },
                        new
                        {
                            Id = 4,
                            BookId = 11,
                            ClientId = 8,
                            DateOfReservetion = new DateTime(2024, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Completed"
                        },
                        new
                        {
                            Id = 5,
                            BookId = 8,
                            ClientId = 9,
                            DateOfReservetion = new DateTime(2024, 6, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Completed"
                        },
                        new
                        {
                            Id = 6,
                            BookId = 9,
                            ClientId = 1,
                            DateOfReservetion = new DateTime(2023, 12, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Completed"
                        });
                });

            modelBuilder.Entity("Exam_Library.Entities.Sale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("SaleDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("WorkerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("ClientId");

                    b.HasIndex("WorkerId");

                    b.ToTable("Sales");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookId = 1,
                            ClientId = 0,
                            Quantity = 1,
                            SaleDate = new DateTime(2023, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalPrice = 570m,
                            WorkerId = 1
                        },
                        new
                        {
                            Id = 2,
                            BookId = 5,
                            ClientId = 0,
                            Quantity = 2,
                            SaleDate = new DateTime(2024, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalPrice = 1140m,
                            WorkerId = 4
                        },
                        new
                        {
                            Id = 3,
                            BookId = 4,
                            ClientId = 0,
                            Quantity = 1,
                            SaleDate = new DateTime(2024, 7, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalPrice = 630m,
                            WorkerId = 5
                        },
                        new
                        {
                            Id = 4,
                            BookId = 12,
                            ClientId = 0,
                            Quantity = 3,
                            SaleDate = new DateTime(2024, 6, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalPrice = 1170m,
                            WorkerId = 1
                        },
                        new
                        {
                            Id = 5,
                            BookId = 6,
                            ClientId = 0,
                            Quantity = 1,
                            SaleDate = new DateTime(2024, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalPrice = 230m,
                            WorkerId = 1
                        },
                        new
                        {
                            Id = 6,
                            BookId = 9,
                            ClientId = 0,
                            Quantity = 1,
                            SaleDate = new DateTime(2024, 2, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalPrice = 220m,
                            WorkerId = 1
                        },
                        new
                        {
                            Id = 7,
                            BookId = 8,
                            ClientId = 0,
                            Quantity = 2,
                            SaleDate = new DateTime(2024, 1, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalPrice = 880m,
                            WorkerId = 1
                        });
                });

            modelBuilder.Entity("Exam_Library.Entities.Worker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("LibraryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("LibraryId");

                    b.ToTable("Workers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LibraryId = 1,
                            Name = "Sergay",
                            Position = "Seller",
                            Salary = 16000m,
                            Surname = "Kulumyk"
                        },
                        new
                        {
                            Id = 2,
                            LibraryId = 1,
                            Name = "Olena",
                            Position = "Manager",
                            Salary = 26000m,
                            Surname = "Kvitka"
                        },
                        new
                        {
                            Id = 3,
                            LibraryId = 2,
                            Name = "Ivan",
                            Position = "Seller",
                            Salary = 20000m,
                            Surname = "Symonenko"
                        },
                        new
                        {
                            Id = 4,
                            LibraryId = 1,
                            Name = "Petro",
                            Position = "Director",
                            Salary = 35000m,
                            Surname = "Vunograskiy"
                        },
                        new
                        {
                            Id = 5,
                            LibraryId = 2,
                            Name = "Sveta",
                            Position = "Manager",
                            Salary = 28000m,
                            Surname = "Socol"
                        },
                        new
                        {
                            Id = 6,
                            LibraryId = 1,
                            Name = "Andriy",
                            Position = "Director",
                            Salary = 37000m,
                            Surname = "Petlura"
                        });
                });

            modelBuilder.Entity("ActionBook", b =>
                {
                    b.HasOne("Exam_Library.Entities.Action", null)
                        .WithMany()
                        .HasForeignKey("ActionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Exam_Library.Entities.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookClient", b =>
                {
                    b.HasOne("Exam_Library.Entities.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Exam_Library.Entities.Client", null)
                        .WithMany()
                        .HasForeignKey("ClientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Exam_Library.Entities.Book", b =>
                {
                    b.HasOne("Exam_Library.Entities.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Exam_Library.Entities.Library", "Library")
                        .WithMany("Books")
                        .HasForeignKey("LibraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Library");
                });

            modelBuilder.Entity("Exam_Library.Entities.Client", b =>
                {
                    b.HasOne("Exam_Library.Entities.Library", "Library")
                        .WithMany("Clients")
                        .HasForeignKey("LibraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Library");
                });

            modelBuilder.Entity("Exam_Library.Entities.Reserved", b =>
                {
                    b.HasOne("Exam_Library.Entities.Book", "Book")
                        .WithMany("Reserveds")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Exam_Library.Entities.Client", "Client")
                        .WithMany("Reserved")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Exam_Library.Entities.Sale", b =>
                {
                    b.HasOne("Exam_Library.Entities.Book", "Book")
                        .WithMany("Sales")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Exam_Library.Entities.Client", "Client")
                        .WithMany("Sales")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Exam_Library.Entities.Worker", "Worker")
                        .WithMany("Sales")
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Client");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("Exam_Library.Entities.Worker", b =>
                {
                    b.HasOne("Exam_Library.Entities.Library", "Library")
                        .WithMany("Workers")
                        .HasForeignKey("LibraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Library");
                });

            modelBuilder.Entity("Exam_Library.Entities.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("Exam_Library.Entities.Book", b =>
                {
                    b.Navigation("Reserveds");

                    b.Navigation("Sales");
                });

            modelBuilder.Entity("Exam_Library.Entities.Client", b =>
                {
                    b.Navigation("Reserved");

                    b.Navigation("Sales");
                });

            modelBuilder.Entity("Exam_Library.Entities.Library", b =>
                {
                    b.Navigation("Books");

                    b.Navigation("Clients");

                    b.Navigation("Workers");
                });

            modelBuilder.Entity("Exam_Library.Entities.Worker", b =>
                {
                    b.Navigation("Sales");
                });
#pragma warning restore 612, 618
        }
    }
}
